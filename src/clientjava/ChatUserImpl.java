package clientjava;import java.awt.*;import java.awt.event.*;import javax.swing.*;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import static java.lang.Thread.sleep;import java.util.ArrayList;import java.util.Iterator;import java.util.logging.Level;import java.util.logging.Logger;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;import org.apache.http.util.EntityUtils;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;public class ChatUserImpl {    private String title = "Logiciel de discussion en ligne";    private String pseudo = null;    private String salon = null;    private JFrame window = new JFrame(this.title);    private JTextArea txtOutput = new JTextArea();    private JTextField txtMessage = new JTextField();    private JButton btnSend = new JButton("Envoyer");    private JButton btnAddSalon = new JButton("Ajouter salon");    private JList<String> listSalons = new JList<>();    private HttpClient client;    private DefaultListModel<String> lesSalons = new DefaultListModel<String>();    private HttpGet request;    private HttpGet requestNewMessages;    private HttpResponse response;    private HttpResponse responseNewMessages;    private String selectedRoom = null;    public ChatUserImpl() throws IOException {        this.createIHM();        ThreadSafeClientConnManager mgr = new ThreadSafeClientConnManager();        mgr.setDefaultMaxPerRoute(256);        mgr.setMaxTotal(256);        client = new DefaultHttpClient(mgr);        this.requestPseudo();        this.afficheSalons();    }    public void createIHM() {        // Assemblage des composants        listSalons.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);        listSalons.setModel(lesSalons);        JPanel panel = (JPanel) this.window.getContentPane();        JScrollPane sclPane = new JScrollPane(txtOutput);        JScrollPane sclPaneSalons = new JScrollPane(listSalons);        panel.add(sclPane, BorderLayout.CENTER);        JPanel southPanel = new JPanel(new BorderLayout());        JPanel eastPanel = new JPanel(new BorderLayout());        southPanel.add(this.txtMessage, BorderLayout.CENTER);        southPanel.add(this.btnSend, BorderLayout.EAST);        eastPanel.add(this.btnAddSalon, BorderLayout.NORTH);        eastPanel.add(sclPaneSalons, BorderLayout.CENTER);        panel.add(southPanel, BorderLayout.SOUTH);        panel.add(eastPanel, BorderLayout.EAST);        // Gestion des évènements        window.addWindowListener(new WindowAdapter() {            public void windowClosing(WindowEvent e) {                window_windowClosing(e);            }        });        btnSend.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                btnSend_actionPerformed(e);            }        });        btnAddSalon.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                try {                    btnAddSalon_actionPerformed(e);                } catch (IOException ex) {                    Logger.getLogger(ChatUserImpl.class.getName()).log(Level.SEVERE, null, ex);                }            }        });        txtMessage.addKeyListener(new KeyAdapter() {            public void keyReleased(KeyEvent event) {                if (event.getKeyChar() == '\n') {                    btnSend_actionPerformed(null);                }            }        });        //selection des salons        listSalons.addListSelectionListener(new ListSelectionListener() {            @Override            public void valueChanged(ListSelectionEvent e) {                if (!e.getValueIsAdjusting()) {                    selectedRoom = (String) listSalons.getSelectedValue();                    title = "Logiciel de discussion en ligne. " + selectedRoom;                    window.setTitle(title);                    try {                        HttpGet request = new HttpGet("http://localhost:8000/getMessagesSalon?login=" + pseudo.replaceAll(" ", "%20") + "&salon=" + selectedRoom);                        HttpResponse response = client.execute(request);                        BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));                        String line = "";                        while ((line = rd.readLine()) != null) {                            txtOutput.setText("");                            ArrayList messagesRooms = transformTab(line);                            Iterator i = messagesRooms.iterator();                            while (i.hasNext()) {                                String mess = (String) i.next();                                txtOutput.append(mess + "\n");                            }                        }                    } catch (IOException ex) {                        Logger.getLogger(ChatUserImpl.class.getName()).log(Level.SEVERE, null, ex);                    }                }            }        });        // Initialisation des attributs        this.txtOutput.setBackground(new Color(220, 220, 220));        this.txtOutput.setEditable(false);        this.window.setSize(500, 400);        this.window.setVisible(true);        this.txtMessage.requestFocus();    }    //afficher les salons à la connexion    public void afficheSalons() {        try {            HttpGet request = new HttpGet("http://localhost:8000/getRooms");            HttpResponse response = client.execute(request);            BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));            String line = "";            while ((line = rd.readLine()) != null) {                System.out.println(line);                ArrayList Rooms = transformTab(line);                Iterator i = Rooms.iterator();                while (i.hasNext()) {                    String room = (String) i.next();                    lesSalons.addElement(room);                }            }        } catch (Exception e) {            JOptionPane.showMessageDialog(this.window, "Impossible de joindre le serveur");        }    }    //login    public void requestPseudo() throws IOException {        this.pseudo = JOptionPane.showInputDialog(                this.window, "Entrez votre pseudo : ",                this.title, JOptionPane.OK_OPTION        );        try {            String login = this.pseudo.replaceAll(" ", "%20");            HttpGet request = new HttpGet("http://localhost:8000/subscribe?login=" + login);            HttpResponse response = client.execute(request);            BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));            String line = "";            while ((line = rd.readLine()) != null) {                System.out.println(line);                if (line.equals("{\"response\":\"login exist\"}")) {                    JOptionPane.showMessageDialog(this.window, "Pseudo existe deja! Veuillez choisir un autre");                    requestPseudo();                }            }        } catch (Exception e) {            JOptionPane.showMessageDialog(this.window, "Impossible de joindre le serveur");            requestPseudo();        }        if (this.pseudo == null) {            System.exit(0);        }    }    //unSubscribe    public void window_windowClosing(WindowEvent e) {        try {            String login = this.pseudo.replaceAll(" ", "%20");            HttpPost request = new HttpPost("http://localhost:8000/unSubscribe?login=" + login);            HttpResponse response = client.execute(request);            BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));            String line = "";            while ((line = rd.readLine()) != null) {                System.out.println(line);                System.exit(-1);            }        } catch (IOException ex) {            JOptionPane.showMessageDialog(this.window, "Impossible de joindre le serveur");        }    }    //fonctions envoi message    public void sendMessage(String mess) {        try {            HttpPost request = new HttpPost("http://localhost:8000/sendMessage?nomSalon=" + selectedRoom + "&message=" + mess.replaceAll(" ", "%20") + "&login=" + this.pseudo.replaceAll(" ", "%20"));            HttpResponse response = client.execute(request);            BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));            String line = "";            while ((line = rd.readLine()) != null) {                System.out.println(line);                /*                    JSONParser parser = new JSONParser();                    JSONObject json;                    try {                        json = (JSONObject) parser.parse(line);                        this.txtOutput.append((String) json.get("response") + "\n");                        this.txtMessage.setText("");                        this.txtMessage.requestFocus();                    } catch (ParseException ex) {                        Logger.getLogger(ChatUserImpl.class.getName()).log(Level.SEVERE, null, ex);                    }                 */            }        } catch (IOException ex) {            Logger.getLogger(ChatUserImpl.class.getName()).log(Level.SEVERE, null, ex);        }    }    //Gestion de l'envoi des messages    public void btnSend_actionPerformed(ActionEvent e) {        if (selectedRoom == null) {            JOptionPane.showMessageDialog(this.window, "selectionner d'abord un salon!");        } else if (this.txtMessage.getText().equals("")) {            JOptionPane.showMessageDialog(this.window, "renseigner le champ dabord!");        } else {            sendMessage(this.txtMessage.getText());        }    }    //Gestion des salons    public void btnAddSalon_actionPerformed(ActionEvent e) throws IOException {        requestSalon();    }    public void requestSalon() throws IOException {        this.salon = JOptionPane.showInputDialog(                this.window, "Nom du salon : "        );        try {            if (this.salon.isEmpty() || this.salon == null) {                JOptionPane.showMessageDialog(this.window, "Remplir ce champ");                requestSalon();            } else {                try {                    HttpPost request = new HttpPost("http://localhost:8000/addSalon?nomSalon=" + this.salon.replaceAll(" ", "%20") + "&login=" + this.pseudo.replaceAll(" ", "%20"));                    System.out.println(request);                    HttpResponse response = client.execute(request);                    BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));                    String line = "";                    while ((line = rd.readLine()) != null) {                        if (line.equals("{\"response\":\"salon exist\"}")) {                            JOptionPane.showMessageDialog(this.window, "Salon existe deja! Veuillez choisir un autre");                            requestSalon();                        } else {                            JSONParser parser = new JSONParser();                            JSONObject json = (JSONObject) parser.parse(line);                            lesSalons.addElement((String) json.get("response"));                        }                    }                } catch (Exception e) {                    JOptionPane.showMessageDialog(this.window, "Impossible de joindre le serveur");                    e.printStackTrace();                    requestSalon();                }            }        } catch (Exception e) {        }    }    public ArrayList<String> transformTab(String texte) {        ArrayList liste = new ArrayList();        String regex = "\\[|\\]|,|\"";        String[] tab = texte.split(regex);        for (int i = 0; i < tab.length; i++) {            if (!tab[i].equals("")) {                liste.add(tab[i]);            }        }        return liste;    }    public static void main(String[] args) throws ClientProtocolException, IOException, InterruptedException {        ChatUserImpl chatUser = new ChatUserImpl();        //gestion du renouvellement des salons        boolean received = false;        ArrayList listeRooms = new ArrayList();        ArrayList last_listeRooms = new ArrayList();        boolean is_first = false;        //gestion du renouvellement des messages        boolean received2 = false;        ArrayList listeMessages = new ArrayList();        ArrayList last_listeMessages = new ArrayList();        boolean is_first2 = false;        while (true) {            //renouvellement des rooms            chatUser.request = new HttpGet("http://localhost:8000/getAnotherRooms?login=" + chatUser.pseudo.replaceAll(" ", "%20"));            chatUser.response = chatUser.client.execute(chatUser.request);            BufferedReader rd = new BufferedReader(new InputStreamReader(chatUser.response.getEntity().getContent()));            String line = "";            int tailleDiff = 0;            while ((line = rd.readLine()) != null) {                try {                    listeRooms = chatUser.transformTab(line);                    received = true;                    if (is_first == false) {                        last_listeRooms = (ArrayList) listeRooms.clone();                    }                } catch (Exception e) {                    received = false;                } finally {                    //récupérer les nouveaux salons                     if (received) {                        if (is_first) {                            if (last_listeRooms.size() != listeRooms.size()) {                                tailleDiff = listeRooms.size() - last_listeRooms.size();                                for (int i = 0; i < tailleDiff; i++) {                                    chatUser.lesSalons.addElement((String) listeRooms.get(listeRooms.size() + i - 1));                                }                                last_listeRooms = (ArrayList) listeRooms.clone();                            }                        } else {                            for (int i = 0; i < tailleDiff; i++) {                                chatUser.lesSalons.addElement((String) listeRooms.get(last_listeRooms.size() + i - 1));                            }                            last_listeRooms = (ArrayList) listeRooms.clone();                            is_first = true;                        }                    }                }            }            //renouvellement des messages            if (chatUser.selectedRoom != null) {                chatUser.requestNewMessages = new HttpGet("http://localhost:8000/getMessagesSalon?login=" + chatUser.pseudo.replaceAll(" ", "%20") + "&salon=" + chatUser.selectedRoom);                chatUser.responseNewMessages = chatUser.client.execute(chatUser.requestNewMessages);                BufferedReader rd2 = new BufferedReader(new InputStreamReader(chatUser.responseNewMessages.getEntity().getContent()));                String line2 = "";                int tailleDiff2 = 0;                while ((line2 = rd2.readLine()) != null) {                    try {                        listeMessages = chatUser.transformTab(line2);                        received2 = true;                        if (is_first2 == false) {                            last_listeMessages = (ArrayList) listeMessages.clone();                        }                    } catch (Exception e) {                        received2 = false;                    } finally {                        //récupérer les nouveaux messages                         if (received2) {                            if (is_first2) {                                if (last_listeMessages.size() != listeMessages.size()) {                                    tailleDiff2 = listeMessages.size() - last_listeMessages.size();                                    for (int i = 0; i < tailleDiff2; i++) {                                        try {                                            chatUser.txtOutput.append((String) listeMessages.get(listeMessages.size() + i - 1) + "\n");                                        } catch (Exception e) {                                        }                                        chatUser.txtMessage.setText("");                                        chatUser.txtMessage.requestFocus();                                    }                                    last_listeMessages = (ArrayList) listeMessages.clone();                                }                            } else {                                for (int i = 0; i < tailleDiff2; i++) {                                    chatUser.txtOutput.append((String) listeMessages.get(listeMessages.size() + i - 1) + "\n");                                    chatUser.txtMessage.setText("");                                    chatUser.txtMessage.requestFocus();                                }                                last_listeMessages = (ArrayList) listeMessages.clone();                                is_first2 = true;                            }                        }                    }                }            }        }    }}